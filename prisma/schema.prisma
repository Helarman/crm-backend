generator client {
  provider = "prisma-client-js"
  enableTracing = true
  log_level = "info"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://crm:Lwrl1GlK9U0OdKIGFuQ13ZCWBczocRZg@dpg-d0fs2rk9c44c73bk7q40-a.frankfurt-postgres.render.com/crm_zbvm"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  name    String @default("Не указано")
  picture String @default("/uploads/no-user-image.png")

  role EnumUserRoles @default(NONE)
  restaurant Restaurant[] @relation("RestaurantToUser")
  shifts UserShift[] @relation("UserToUserShift")
  assignedItems OrderItem[] @relation("OrderItemToUser") 
  workshops UserWorkshop[] 
  transactions InventoryTransaction[]

  @@map("user")
}
model Workshop {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique 
  products ProductWorkshop[]
  users     UserWorkshop[]

  @@map("workshop")
}
model UserWorkshop {
  userId     String   @map("user_id")
  workshopId String   @map("workshop_id")
  user       User     @relation(fields: [userId], references: [id])
  workshop   Workshop @relation(fields: [workshopId], references: [id])

  @@id([userId, workshopId])
  @@map("user_workshop")
}

model DeliveryZone {
  id          String   @id @default(uuid())
  title       String
  price       Float
  minOrder    Float?   @default(0) @map("min_order")
  polygon     String   @map("polygon")
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String @map("restaurant_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("delivery_zones")
}

model Restaurant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  address     String
  images      String[]
  latitude    String
  longitude   String
  users     User[]    @relation("RestaurantToUser")
  products  Product[] @relation("RestaurantToProduct")
  shifts    Shift[]   @relation("RestaurantToShift")
  orders    Order[]   @relation("OrderToRestaurant")
  yandexEdaIntegration YandexEdaIntegration? @relation("RestaurantToYandexIntegration")
  productPrices RestaurantProductPrice[] @relation("RestaurantPrices")
  delivery_zones DeliveryZone[]
  
  warehouses Warehouse[]
  surcharges RestaurantSurcharge[]
  discounts   RestaurantDiscount[] 

  @@map("restaurant")
}

model ProductWorkshop {
  productId  String   @map("product_id")
  workshopId String   @map("workshop_id")
  product    Product  @relation(fields: [productId], references: [id])
  workshop   Workshop @relation(fields: [workshopId], references: [id])

  @@id([productId, workshopId])
  @@map("product_workshop")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  weight      Int?      
  quantity    Int?      
  packageQuantity Int?  @map("package_quantity") 
  preparationTime Int? @map("preparation_time") 
  price  Int
  printLabels Boolean @default(false) @map("print_labels") 
  publishedOnWebsite Boolean @default(false) @map("published_on_website") 
  publishedInApp Boolean @default(false) @map("published_in_app") 
  isStopList Boolean @default(false) @map("is_stop_list") 

  workshops ProductWorkshop[]

  pageTitle String? @map("page_title")
  metaDescription String? @map("meta_description") 
  content String? 
  images  String[] 
  
  additives  Additive[] @relation("ProductAdditives")
  
  restaurantPrices RestaurantProductPrice[] @relation("ProductPrices") 
  
  restaurants   Restaurant[] @relation("RestaurantToProduct")
  category   Category? @relation(fields: [categoryId], references: [id], name: "ProductToCategory")
  categoryId String?   @map("category_id")
  orderItems OrderItem[] @relation("OrderItemToProduct")
  
  inventoryItems InventoryItem[]
  ingredients ProductIngredient[]

  productDiscounts ProductDiscount[]
  @@map("product")
}

model RestaurantProductPrice {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], name: "ProductPrices")
  productId String   @map("product_id")
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], name: "RestaurantPrices")
  restaurantId String @map("restaurant_id")
  price     Int      
  isStopList Boolean @default(false) @map("is_stop_list") 
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([productId, restaurantId])
  @@map("restaurant_product_price")
}

model Additive {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String
  price     Int
  products  Product[] @relation("ProductAdditives")
  orderItems OrderItem[] @relation("OrderItemAdditives")

  @@map("additive")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  products Product[] @relation("ProductToCategory")
  discounts CategoryDiscount[]

  @@map("category")
}

model Shift {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  status      EnumShiftStatus @default(PLANNED)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], name: "RestaurantToShift")
  restaurantId String     @map("restaurant_id")
  users       UserShift[] @relation("ShiftToUserShift")

  startTime   DateTime    @map("start_time")
  endTime     DateTime?   @map("end_time")
  description String?
  orders      Order[]     @relation("OrderToShift")
  @@map("shifts")
}

model UserShift {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  shiftId  String  @map("shift_id")
  user     User    @relation(fields: [userId], references: [id], name: "UserToUserShift")
  shift    Shift   @relation(fields: [shiftId], references: [id], name: "ShiftToUserShift")
  
  @@unique([userId, shiftId])
  @@map("user_shifts")
}

model Customer {
  id          String   @id @default(uuid())
  phone       String   @unique
  code        String?
  codeExpires DateTime?
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]  @relation("OrderToCustomer")
  bonusPoints Float    @default(0) @map("bonus_points")
  bonusTransactions BonusTransaction[]
  discountApplications DiscountApplication[]
  promocodes PromoCode[]

  @@map("customer")
}

model Order {
  id          String      @id @default(cuid())
  source      OrderSource @default(PANEL)
  number      String      @unique @map("order_number")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  status      EnumOrderStatus @default(CREATED)
  type        EnumOrderType   @default(DINE_IN)
  scheduledAt DateTime?       @map("scheduled_at")
  tableNumber String?
  customer    Customer?   @relation(fields: [customerId], references: [id], name: "OrderToCustomer")
  customerId  String?     @map("customer_id")
  numberOfPeople String?
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id], name: "OrderToRestaurant")
  restaurantId String     @map("restaurant_id")
  
  shift       Shift?      @relation(fields: [shiftId], references: [id], name: "OrderToShift")
  shiftId     String?     @map("shift_id")
  
  items       OrderItem[] @relation("OrderToOrderItem")
  payment     Payment?    @relation("OrderToPayment")
  
  totalAmount Int         @default(0) @map("total_amount")
  comment     String?
  yandexEdaOrder YandexEdaOrder? @relation("OrderToYandexOrder")
  
  deliveryAddress String? @map("delivery_address")
  deliveryTime    DateTime? @map("delivery_time")
  deliveryNotes   String? @map("delivery_notes")

  surcharges OrderSurcharge[] @relation("OrderToSurcharge")

  discountApplications DiscountApplication[] @relation("OrderToDiscountApplication")
  discountAmount      Int         @default(0) @map("discount_amount") 

  bonusTransactions BonusTransaction[] @relation("BonusTransactionToOrder")
  bonusPointsUsed   Float       @default(0) @map("bonus_points_used") 
  bonusPointsEarned Float       @default(0) @map("bonus_points_earned") 

  @@map("orders")
}

model OrderItem {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  order       Order         @relation(fields: [orderId], references: [id], name: "OrderToOrderItem")
  orderId     String        @map("order_id")
  
  product     Product       @relation(fields: [productId], references: [id], name: "OrderItemToProduct")
  productId   String        @map("product_id")
  
  quantity    Int           @default(1)
  price       Int           @default(0)
  comment     String?
  
  status      EnumOrderItemStatus @default(CREATED) @map("status")
  startedAt   DateTime?           @map("started_at")
  completedAt DateTime?           @map("completed_at")
  pausedAt    DateTime?           @map("paused_at") 
  
  assignedTo  User?         @relation(fields: [assignedToId], references: [id], name: "OrderItemToUser")
  assignedToId String?      @map("assigned_to_id")
  
  additives   Additive[]    @relation("OrderItemAdditives")
  
  @@map("order_items")
}


model OrderSurcharge {
  id          String      @id @default(cuid())
  order       Order       @relation(fields: [orderId], references: [id], name: "OrderToSurcharge")
  orderId     String      @map("order_id")
  surcharge   Surcharge   @relation(fields: [surchargeId], references: [id])
  surchargeId String      @map("surcharge_id")
  
  amount      Float    
  description String? 
  
  createdAt   DateTime    @default(now()) @map("created_at")
  
  @@map("order_surcharges")
}

model Payment {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  order       Order       @relation(fields: [orderId], references: [id], name: "OrderToPayment")
  orderId     String      @unique @map("order_id")
  
  amount      Int         @default(0)
  method      EnumPaymentMethod
  status      EnumPaymentStatus @default(PENDING)
  externalId  String?     @unique @map("external_id")
  
  @@map("payments")
}

model YandexEdaIntegration {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  restaurant   Restaurant @relation("RestaurantToYandexIntegration", fields: [restaurantId], references: [id])
  restaurantId String     @unique @map("restaurant_id")
  
  apiKey       String
  externalId   String
  isActive     Boolean    @default(true)
  
  @@map("yandex_eda_integration")
}

model YandexEdaOrder {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  order       Order    @relation("OrderToYandexOrder", fields: [orderId], references: [id])
  orderId     String   @unique @map("order_id")
  
  externalId  String   @unique @map("external_id")
  status      String
  
  @@map("yandex_eda_order")
}


model Warehouse {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique @map("restaurant_id")
  
  name        String
  description String?
  isActive    Boolean     @default(true)
  
  storageLocations StorageLocation[]
  inventoryItems   InventoryItem[]
  
  @@map("warehouses")
}

model StorageLocation {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  warehouse   Warehouse   @relation(fields: [warehouseId], references: [id])
  warehouseId String      @map("warehouse_id")
  
  name        String
  code        String?     
  description String?
  isActive    Boolean     @default(true)
  
  inventoryItems InventoryItem[]
  
  @@map("storage_locations")
}

model InventoryItem {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  warehouse   Warehouse   @relation(fields: [warehouseId], references: [id])
  warehouseId String      @map("warehouse_id")
  
  storageLocation StorageLocation? @relation(fields: [storageLocationId], references: [id])
  storageLocationId String? @map("storage_location_id")
  
  product     Product?    @relation(fields: [productId], references: [id])
  productId   String?     @map("product_id")
  
  name        String      
  description String?
  unit        String      
  quantity    Float       @default(0)
  reserved    Float       @default(0) 
  minQuantity Float?      @map("min_quantity") 
  cost        Float?      
  
  isActive    Boolean     @default(true)
  
  inventoryTransactions InventoryTransaction[]
  ingredients ProductIngredient[]
  @@map("inventory_items")
}

model ProductIngredient {
  product       Product       @relation(fields: [productId], references: [id])
  productId     String        @map("product_id")
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String      @map("inventory_item_id")
  quantity      Float        
  
  @@id([productId, inventoryItemId])
  @@map("product_ingredient")
}

model InventoryTransaction {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String    @map("inventory_item_id")
  
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?     @map("user_id")
  
  type        InventoryTransactionType
  quantity    Float
  previousQuantity Float   @map("previous_quantity")
  newQuantity Float       @map("new_quantity")
  
  reason      String?    
  documentId  String?     @map("document_id") 
  
  @@map("inventory_transactions")
}

model Surcharge {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  title       String
  description String?
  
  type        EnumSurchargeType
  amount      Float 
  orderTypes  EnumOrderType[] 
  restaurants RestaurantSurcharge[]
  orderSurcharges OrderSurcharge[]

  isActive    Boolean     @default(true)
  
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  
  @@map("surcharges")
}

model RestaurantSurcharge {
  surchargeId   String    @map("surcharge_id")
  restaurantId  String    @map("restaurant_id")
  surcharge     Surcharge @relation(fields: [surchargeId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  
  @@id([surchargeId, restaurantId])
  @@map("restaurant_surcharge")
}

model BonusTransaction {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @map("customer_id")
  
  amount      Float 
  description String?
  order       Order?   @relation(fields: [orderId], references: [id], name: "BonusTransactionToOrder")
  orderId     String?  @map("order_id")
  
  @@map("bonus_transactions")
}

model Discount {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  title       String
  description String?
  type        DiscountType
  value       Float       
  
  targetType  DiscountTargetType
  minOrderAmount Float?   @map("min_order_amount")
  
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  daysOfWeek  DayOfWeek[]
  
  isActive    Boolean     @default(true)
  code        String?    
  maxUses     Int?        @map("max_uses") 
  currentUses Int         @default(0) @map("current_uses") 
  
  restaurants RestaurantDiscount[]
  categories  CategoryDiscount[]
  products    ProductDiscount[]
  
  orderTypes  EnumOrderType[]
  
  applications DiscountApplication[]
  
  promocodes PromoCode[]

  @@map("discounts")
}

model RestaurantDiscount {
  discountId    String     @map("discount_id")
  restaurantId  String     @map("restaurant_id")
  discount      Discount   @relation(fields: [discountId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([discountId, restaurantId])
  @@map("restaurant_discount")
}

model CategoryDiscount {

  discountId    String    @map("discount_id")
  categoryId    String    @map("category_id")
  discount      Discount  @relation(fields: [discountId], references: [id])
  category      Category  @relation(fields: [categoryId], references: [id])
  
  @@id([discountId, categoryId])
  @@map("category_discount")
}

model ProductDiscount {
  discountId    String    @map("discount_id")
  productId     String    @map("product_id")
  discount      Discount  @relation(fields: [discountId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
  
  @@id([discountId, productId])
  @@map("product_discount")
}

model DiscountApplication {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  
  discount    Discount    @relation(fields: [discountId], references: [id])
  discountId  String      @map("discount_id")
  
  order       Order       @relation(fields: [orderId], references: [id], name: "OrderToDiscountApplication")
  orderId     String      @map("order_id")
  
  customer    Customer?   @relation(fields: [customerId], references: [id])
  customerId  String?     @map("customer_id")
  
  
  amount      Float   
  description String?
  
  @@map("discount_applications")
}

model PromoCode {
  id         String   @id @default(cuid())
  code       String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  discount   Discount @relation(fields: [discountId], references: [id])
  discountId String
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@unique([code, customerId])
}

enum EnumSurchargeType {
  FIXED   
  PERCENTAGE 
}

enum InventoryTransactionType {
  RECEIPT      
  WRITE_OFF    
  CORRECTION    
  TRANSFER      
}

enum EnumOrderItemStatus {
  REFUNDED
  CREATED     
  IN_PROGRESS  
  PARTIALLY_DONE 
  PAUSED       
  COMPLETED     
  CANCELLED     
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
  BANQUET
}

enum OrderSource {
  MOBILE
  SITE
  PANEL
}

enum EnumOrderType {
  DINE_IN     // Заказ в зале
  TAKEAWAY    // На вынос
  DELIVERY    // Доставка
  BANQUET     // Банкет
}

enum EnumOrderStatus {
  CREATED
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  COMPLETED
  CANCELLED
}

enum EnumPaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum EnumPaymentMethod {
  CASH
  CARD
  ONLINE
  YANDEX     // Яндекс оплата (для заказов через Яндекс Еду)
}

enum EnumShiftStatus {
  PLANNED
  STARTED
  COMPLETED
}

enum EnumUserRoles {
  NONE
  STOREMAN
  COURIER
  COOK
  CHEF
  WAITER
  CASHIER
  MANAGER
  SUPERVISOR
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum DiscountTargetType {
  ALL
  RESTAURANT
  CATEGORY
  PRODUCT
}


enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
